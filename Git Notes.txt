# Notes for using Git through Git Bash

# Logging In to Git
$ git config --global user.name "User Name"
$ git config --global user.email myemail@gmail.com

$ git config --global init.default branch main 

cd C:/user/etc                # Change directory 
git init                      # Sets initial respository to cd, creates .git folder in cd
clear                         # Refresh terminal 

git status                    # Shows un/tracked and commits
git add test.py/txt           # Tracks changes made to file to Git, git status to verify, FILES WITH SPACES NEED QUOTES
git add --all                 # tracks all files in cd/ adds to staging. Alt: Just simply git add .
git rm --cached test.py       # Untracks currently tracked file, one that's been committed , still shows in git status, unlike .gitignore
git restore --staged file.txt # Removes from staging area for commits. Will still be tracked for future chg but not in this commit. Used for intentional commits logs.

# IGNORE  
save ".gitignore" file in cd. Must put in quotes
                                    
# COMMIT 
# A snapshot of files "right" now
# Files must first be in staging area/ tracked
git commit    -m "first commit - commit msg" 
git commit -a -m "commit msg"    # -a stages all prev used files, so no git add. Does not add new (untracked) files to commit however 

	 # If no credentials
	 git config --global user.email "you@example.com"
	 git config --global user.name "Your Name"

git log                # see save credentials and commit history
git log --oneline      # For commit msg summary
git log -p             # -p for 'patch', detailed view of changes in each commit
git log -p -n <limit>  # Where <limit> is the number of commits you want to see.
git diff               # Shows differences in modified files

$ {up arrow}           # cmd line, cycles through prev cmd
q                      # Closes out current directory 
Ctrl + C	       # returns to $ if stuck in input/error mode
spacebar / b           # Browse git log 1pg at a time

git reset commit-value # Reverts to prev commit, find commit-value from 

# Branches # 
Makes copies of main branch. Teams create branches in order to work on diff things/ bug fix/etc
Then merge back into main branch when sure

git branch 		# Prints branches, * shows current branch
git branch BranchName   # Adds a branch. Current branch in green w/ *
git switch BranchName   # Switches current 

git merge -m "Merge FixTempBranch back into main" FixTempBranch 
# Last agr is remote branch that is merged into current

# General
Branch off, commit in the meantime, merge back to main when sure
use git commit -a -m "msg" when doing frequent commits. The -a skips staging 
# .gitignore files are still ignored when using -a to stage/commit at the same time
